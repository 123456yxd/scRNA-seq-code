For scRNA-seq



1.Take the first 20%, 40%, 60%, 80%, 100% of the data to new files. (have done)

seqkit head -n 32971239 1214-7_R1.fq > 1214-7_R1.part1.fq
seqkit head -n 32971239 1214-7_R2.fq.gz > 1214-7_R2.part1.fq

2.Since both reads1 and reads2 files contain information about barcode and genome, in order to improve the data utilisation efficiency of reads1 and reads2 files, we pre-processed the reads1 and reads2 files respectively. We used codes to combine the reads1 and reads2 files of scRNA-seq clean data (such as: "{sample}_R1.fq.gz" and "{sample}_R2.fq.gz") to mention barcode sequences and genome sequences, respectively, and processed them into four fastq files for downstream splitting of barcode and comparison processes. Make sure all fastq files have names in the form: {sample name}_{S#}_L00{#}_R1_001.fastq.gz , {sample name}_{S#}_L00{#}_R2_001.fastq.gz , {sample name}B_{S#}_L00{#}_R1_001.fastq.gz and {sample name}B_{S#}_L00{#}_R2_001.fastq.gz. 

cutadapt -g NNNNNNNNAGAATACACGACGCTCTTCCGATCT -o 1214-7_p1.r1.fastq 1214-7_R1.part1.fq
cutadapt -g NNNNNNNNAGAATACACGACGCTCTTCCGATCT -o 1214-7_p1.r2.fastq 1214-7_R2.part1.fq
cat 1214-7_p1.r1.fastq | seqkit subseq -r 1:85 > 1214-7_p1_S5_L001_R1_001.fastq
cat 1214-7_p1.r2.fastq | seqkit subseq -r 80:100 > 1214-7_p1_S5_L001_R2_001.fastq
cat 1214-7_p1.r2.fastq | seqkit subseq -r 1:85 > 1214-7_p1B_S5_L001_R1_001.fastq
cat 1214-7_p1.r1.fastq | seqkit subseq -r 80:100 > 1214-7_p1B_S5_L001_R2_001.fastq
gzip 1214-7_p1_S5_L001_R1_001.fastq
gzip 1214-7_p1_S5_L001_R2_001.fastq
gzip 1214-7_p1B_S5_L001_R1_001.fastq
gzip 1214-7_p1B_S5_L001_R2_001.fastq

3. Create a folder named demo and then in the demo folder create the folders with the sample names : {sample} and {sample}B. Put {sample}_S5_L001_R1_001.fastq and {sample}_S5_L001_R2_001.fastq in the folder named {sample}; Put {sample}B_S5_L001_R1_001.fastq and {sample}B_S5_L001_R2_001.fastq in the folder named {sample}B. 
3.Then we performed single-cell sequencing data analyses according to the processes and scripts of previous articles "Prokaryotic single-cell RNA sequencing by in situ combinatorial indexing". The scripts folder was also been put in "scripts" folder which we made some modifications owing to differences in python versions. The data are all in one lane, so we removed the step of merging the lanes. Then in the "demo" folder, run the following codes: 
vi A1214-7_p1
sh A1214-7_p1

A1214-7_p1 content is: python /home/yanxiaod/scripts/sc_pipeline_11.py 1214-7_p1_S5 1

4. Look at {sample}_bc1_ReadsPerBC.eps, {sample}_bc1_kneePlot.eps, {sample}B_bc1_ReadsPerBC.eps and {sample}B_bc1_kneePlot.eps to determine number of BCs to include in further analysis. In the following analysis step, we only need to generate statistical tables for UMI, genes and cells, so we remove the step of synthesising the matrix. This script generates two files named as ("{sample}_CDS_v11_threshold_0_filtered_mapped_UMIs.txt" and "{sample}B_CDS_v11_threshold_0_filtered_mapped_UMIs.txt").
The codes were:
vi B1214-7_p1
sh B1214-7_p1
B 1214-7_p1 content is : sh  /home/yanxiaod/scripts/pipeline.sh 1214-7_p1 10000 /home/yanxiaod/Reference/Escherichia_coli_str_k_12_substr_mg1655_gca_000005845.ASM584v2.dna.toplevel.fa.gz /home/yanxiaod/Reference/Escherichia_coli_str_k_12_substr_mg1655.ASM584v2.46.gtf 1214-7_p1_CDS

5.The files ("{sample}_CDS_v11_threshold_0_filtered_mapped_UMIs.txt" and "{sample}B_CDS_v11_threshold_0_filtered_mapped_UMIs.txt") obtained in step 4 are combined into a matrix containing UMI, gene and barcode information.
The codes were: 

      $cat 1214-7_p1_CDS_v11_threshold_0_filtered_mapped_UMIs.txt 1214-7_p1B_CDS_v11_threshold_0_filtered_mapped_UMIs.txt  >  1214-7_p1.txt
      $sed -i "s/1214-7_p1B/1214-7_p1/g" 1214-7_p1.txt
      $sed -i "s/Chromosome://g" 1214-7_p1.txt
      $awk 'BEGIN{ FS=" ";OFS="+" }{ print $1,$2,$3 }' 1214-7_p1.txt > 1214-7_p1.2.txt
      $cat 1214-7_p1.2.txt | sort | uniq > 1214-7_p1.3.txt
      $awk 'BEGIN{ FS="+";OFS=" " }{ print $1,$3 }' 1214-7_p1.3.txt > 1214-7_p1.4.txt
      $awk 'BEGIN{ FS=" ";OFS="+" }{ print $1,$2 }' 1214-7_p1.4.txt > 1214-7_p1.5.txt
      $cat 1214-7_p1.5.txt | sort | uniq -c > 1214-7_p1.6.txt 
      $awk 'BEGIN{ FS=" ";OFS="\t" }{ print $2,$3,$1 }' 1214-7_p1.6.txt > 1214-7_p1.7.txt
      $awk 'BEGIN{ FS="+";OFS="\t" }{ print $1,$2,$3 }' 1214-7_p1.7.txt > 1214-7_p1.8.txt
      $awk 'BEGIN{ FS="\t\t";OFS="\t" }{ print $1,$2,$3 }' 1214-7_p1.8.txt > 1214-7_p1.9.txt
      $awk 'BEGIN{ FS="\t";OFS="+" }{ print $1,$2,$3 }' 1214-7_p1.9.txt > 1214-7_p1.10.txt
      $sed -i '1i\cell+gene+count' 1214-7_p1.10.txt
      $awk 'BEGIN{ FS="+";OFS="\t" }{ print $1,$2,$3 }' 1214-7_p1.10.txt > 1214-7_p1.11.txt
      $awk 'BEGIN{ FS="\t";OFS="," }{ print $1,$2,$3 }' 1214-7_p1.11.txt > 1214-7_p1.12.csv
      $python
>>>import pandas as pd
>>>import numpy as np
>>>table = pd.read_csv("1214-7_p1.12.csv")
>>>table=pd.pivot_table(table,index=["cell"],columns=["gene"],values=["count"],fill_value=0)
>>>df = pd.DataFrame(table)
>>>df.to_csv('1214-7_p1.csv')

